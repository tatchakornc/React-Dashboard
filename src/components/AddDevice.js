import React, { useState } from 'react';
import { ref, get, push } from 'firebase/database';
import { db } from '../firebase';
import QRCodeScanner from './QRCodeScanner';
import './AddDevice.css';

const AddDevice = ({ currentUser, showToast, setCurrentPage }) => {
  const [serialNumber, setSerialNumber] = useState('');
  const [deviceName, setDeviceName] = useState('');
  const [loading, setLoading] = useState(false);
  const [validatingSerialNumber, setValidatingSerialNumber] = useState(false);
  const [serialNumberValid, setSerialNumberValid] = useState(null);
  const [deviceInfo, setDeviceInfo] = useState(null);
  const [step, setStep] = useState(1); // 1: Enter SN, 2: Device Info, 3: Success
  const [availableSNs, setAvailableSNs] = useState([]);
  const [showQRScanner, setShowQRScanner] = useState(false);
  const [inputMethod, setInputMethod] = useState('manual'); // 'manual' ‡∏´‡∏£‡∏∑‡∏≠ 'qr'

  // ‡πÇ‡∏´‡∏•‡∏î available SNs ‡πÄ‡∏°‡∏∑‡πà‡∏≠ component mount
  React.useEffect(() => {
    loadAvailableSNs();
  }, []);

  const loadAvailableSNs = async () => {
    try {
      const snRef = ref(db, 'valid_sn');
      const snapshot = await get(snRef);
      
      if (snapshot.exists()) {
        const snData = snapshot.val();
        const snList = Object.keys(snData);
        setAvailableSNs(snList);
        console.log('üìã Available SNs loaded:', snList);
      } else {
        console.log('üìã No SNs found in database');
        setAvailableSNs([]);
      }
    } catch (error) {
      console.error('Error loading available SNs:', error);
    }
  };

  // ‡πÄ‡∏ä‡πá‡∏Ñ Serial Number ‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const validateSerialNumber = async (sn) => {
    if (!sn.trim()) {
      setSerialNumberValid(null);
      setDeviceInfo(null);
      return;
    }

    setValidatingSerialNumber(true);
    
    try {
      // ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á exact match ‡πÅ‡∏•‡∏∞ case-insensitive
      console.log('üîç Checking SN:', sn);
      
      // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡∏•‡∏≠‡∏á‡∏´‡∏≤ exact match
      let snRef = ref(db, `valid_sn/${sn}`);
      let snapshot = await get(snRef);
      
      console.log('üìä Exact match - Snapshot exists:', snapshot.exists());
      
      // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á database ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö case-insensitive
      if (!snapshot.exists()) {
        console.log('ÔøΩ Trying case-insensitive search...');
        const allSNsRef = ref(db, 'valid_sn');
        const allSNsSnapshot = await get(allSNsRef);
        
        if (allSNsSnapshot.exists()) {
          const allSNs = allSNsSnapshot.val();
          console.log('üìã All SNs in database:', Object.keys(allSNs));
          
          // ‡∏´‡∏≤ SN ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô (case-insensitive)
          const matchingSN = Object.keys(allSNs).find(dbSN => 
            dbSN.toLowerCase() === sn.toLowerCase()
          );
          
          if (matchingSN) {
            console.log('‚úÖ Found matching SN (case-insensitive):', matchingSN);
            snapshot = { exists: () => true, val: () => allSNs[matchingSN] };
            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó SN ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÉ‡∏ô database
            setSerialNumber(matchingSN);
          }
        }
      }
      
      if (snapshot.exists()) {
        const snData = snapshot.val();
        console.log('‚úÖ SN Data found:', snData);
        setSerialNumberValid(true);
        setDeviceInfo(snData);
        setDeviceName(snData.name || `${snData.type} ${sn.slice(-6)}`);
        showToast(`‚úÖ ‡∏û‡∏ö Serial Number: ${snData.type}`, 'success');
      } else {
        console.log('‚ùå SN not found in database');
        console.log('üí° Available SNs:', availableSNs);
        setSerialNumberValid(false);
        setDeviceInfo(null);
        setDeviceName('');
        showToast('‚ùå Serial Number ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö', 'error');
      }
    } catch (error) {
      console.error('Error validating SN:', error);
      setSerialNumberValid(false);
      setDeviceInfo(null);
      showToast('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Serial Number', 'error');
    }
    
    setValidatingSerialNumber(false);
  };

  // ‡πÄ‡∏ä‡πá‡∏Ñ SN ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏¥‡∏Å‡∏û‡∏¥‡∏°‡∏û‡πå
  const handleSerialNumberChange = (e) => {
    const value = e.target.value.toUpperCase();
    setSerialNumber(value);
    
    // Debounce ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ SN
    if (window.snCheckTimeout) {
      clearTimeout(window.snCheckTimeout);
    }
    
    window.snCheckTimeout = setTimeout(() => {
      validateSerialNumber(value);
    }, 500);
  };

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å QR Code
  const handleQRCodeScan = (data) => {
    if (data) {
      console.log('üì∑ QR Code scanned:', data);
      
      // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÅ‡∏¢‡∏Å SN ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• QR
      let scannedSN = data;
      
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô URL ‡πÉ‡∏´‡πâ‡πÅ‡∏¢‡∏Å SN ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
      if (data.includes('sn=')) {
        const urlParams = new URLSearchParams(data.split('?')[1]);
        scannedSN = urlParams.get('sn');
      }
      
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏•‡∏á
      try {
        const parsed = JSON.parse(data);
        if (parsed.sn || parsed.serial_number) {
          scannedSN = parsed.sn || parsed.serial_number;
        }
      } catch (e) {
        // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà JSON ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö
      }
      
      setSerialNumber(scannedSN.toUpperCase());
      setShowQRScanner(false);
      setInputMethod('manual');
      validateSerialNumber(scannedSN.toUpperCase());
      showToast(`üì∑ ‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${scannedSN}`, 'success');
    }
  };

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î QR Scanner
  const handleQRScannerClose = () => {
    setShowQRScanner(false);
    setInputMethod('manual');
  };

  // ‡πÄ‡∏õ‡∏¥‡∏î QR Scanner
  const openQRScanner = () => {
    setInputMethod('qr');
    setShowQRScanner(true);
  };

  // ‡πÑ‡∏õ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ
  const nextStep = () => {
    if (step === 1 && serialNumberValid) {
      setStep(2);
    }
  };

  // ‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
  const prevStep = () => {
    if (step === 2) {
      setStep(1);
    }
  };

  // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
  const registerDevice = async () => {
    if (!serialNumberValid || !deviceInfo) {
      showToast('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Serial Number ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', 'error');
      return;
    }

    if (!deviceName.trim()) {
      showToast('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå', 'error');
      return;
    }

    setLoading(true);

    try {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
      const getDeviceConfig = (type) => {
        switch (type.toLowerCase()) {
          case '4relay':
          case 'relay4':
            return {
              pins: [
                { id: 'relay1', name: 'Relay 1', pin: 25, state: false },
                { id: 'relay2', name: 'Relay 2', pin: 26, state: false },
                { id: 'relay3', name: 'Relay 3', pin: 27, state: false },
                { id: 'relay4', name: 'Relay 4', pin: 14, state: false }
              ],
              sensors: [
                { id: 'temp', name: '‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥', value: '--', unit: '¬∞C' },
                { id: 'humidity', name: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô', value: '--', unit: '%' },
                { id: 'heat_index', name: '‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏ô', value: '--', unit: '¬∞C' }
              ]
            };
          
          case '8relay':
          case 'relay8':
            return {
              pins: [
                { id: 'relay1', name: 'Relay 1', pin: 25, state: false },
                { id: 'relay2', name: 'Relay 2', pin: 26, state: false },
                { id: 'relay3', name: 'Relay 3', pin: 27, state: false },
                { id: 'relay4', name: 'Relay 4', pin: 14, state: false },
                { id: 'relay5', name: 'Relay 5', pin: 12, state: false },
                { id: 'relay6', name: 'Relay 6', pin: 13, state: false },
                { id: 'relay7', name: 'Relay 7', pin: 32, state: false },
                { id: 'relay8', name: 'Relay 8', pin: 33, state: false }
              ]
            };
          
          case 'led':
          case 'lighting':
            return {
              pins: [
                { id: 'led1', name: 'LED 1', pin: 2, state: false },
                { id: 'led2', name: 'LED 2', pin: 4, state: false },
                { id: 'led3', name: 'LED 3', pin: 5, state: false }
              ]
            };
          
          case 'sensor':
          case 'temperature':
            return {
              sensors: [
                { id: 'temp', name: '‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥', value: '--', unit: '¬∞C' },
                { id: 'humidity', name: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô', value: '--', unit: '%' }
              ]
            };
          
          default:
            return { pins: [], sensors: [] };
        }
      };

      const config = getDeviceConfig(deviceInfo.type);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
      const deviceData = {
        id: serialNumber,
        device_id: serialNumber,
        serial_number: serialNumber,
        name: deviceName.trim(),
        type: deviceInfo.type,
        device_type: deviceInfo.type,
        status: 'offline',
        createdAt: Date.now(),
        createdBy: currentUser.uid,
        lastUpdate: null,
        validSN: true,
        ...config
      };

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á Firebase
      await push(ref(db, `mqtt_devices/${currentUser.uid}`), deviceData);
      
      showToast(`üéâ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå "${deviceName}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!`, 'success');
      setStep(3);
      
    } catch (error) {
      console.error('Error registering device:', error);
      showToast('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå', 'error');
    }

    setLoading(false);
  };

  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
  const resetForm = () => {
    setSerialNumber('');
    setDeviceName('');
    setSerialNumberValid(null);
    setDeviceInfo(null);
    setStep(1);
  };

  return (
    <div className="add-device-container">
      <div className="add-device-header">
        <h1 className="add-device-title">üì± ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà</h1>
        <p className="add-device-subtitle">‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏î‡πâ‡∏ß‡∏¢ Serial Number</p>
        
        {/* Progress Steps */}
        <div className="progress-steps">
          <div className={`step ${step >= 1 ? 'active' : ''}`}>
            <span className="step-number">1</span>
            <span className="step-label">‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Serial Number</span>
          </div>
          <div className={`step ${step >= 2 ? 'active' : ''}`}>
            <span className="step-number">2</span>
            <span className="step-label">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</span>
          </div>
          <div className={`step ${step >= 3 ? 'active' : ''}`}>
            <span className="step-number">3</span>
            <span className="step-label">‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô</span>
          </div>
        </div>
      </div>

      <div className="add-device-content">
        {step === 1 && (
          <div className="step-content">
            <h2>üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Serial Number</h2>
            
            {/* Input Method Selection */}
            <div className="input-method-selection">
              <h3>üìù ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏ô Serial Number</h3>
              <div className="method-buttons">
                <button
                  type="button"
                  className={`method-btn ${inputMethod === 'manual' ? 'active' : ''}`}
                  onClick={() => setInputMethod('manual')}
                >
                  <i className="fas fa-keyboard"></i>
                  <span>‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏≠‡∏á</span>
                </button>
                
                <button
                  type="button"
                  className={`method-btn ${inputMethod === 'qr' ? 'active' : ''}`}
                  onClick={openQRScanner}
                >
                  <i className="fas fa-qrcode"></i>
                  <span>‡∏™‡πÅ‡∏Å‡∏ô QR Code</span>
                </button>
              </div>
            </div>

            {/* Manual Input */}
            {inputMethod === 'manual' && !showQRScanner && (
              <div className="form-group">
                <label htmlFor="serialNumber" className="form-label">
                  <i className="fas fa-barcode"></i>
                  Serial Number *
                </label>
                <input
                  id="serialNumber"
                  type="text"
                  className={`form-input ${serialNumberValid === true ? 'valid' : serialNumberValid === false ? 'invalid' : ''}`}
                  value={serialNumber}
                  onChange={handleSerialNumberChange}
                  placeholder="‡∏Å‡∏£‡∏≠‡∏Å Serial Number ‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"
                  disabled={validatingSerialNumber}
                />
                
                {/* Available SNs Helper */}
                {availableSNs.length > 0 && (
                  <div className="sn-helper">
                    <small>üí° SN ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ({availableSNs.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£):</small>
                    <div className="sn-list">
                      {availableSNs.map(sn => (
                        <span 
                          key={sn} 
                          className="sn-item"
                          onClick={() => {
                            setSerialNumber(sn);
                            validateSerialNumber(sn);
                          }}
                        >
                          {sn}
                        </span>
                      ))}
                    </div>
                  </div>
                )}
                
                {validatingSerialNumber && (
                  <div className="validation-message checking">
                    <i className="fas fa-spinner fa-spin"></i>
                    ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö...
                  </div>
                )}
                
                {serialNumberValid === true && deviceInfo && (
                  <div className="validation-message valid">
                    <i className="fas fa-check-circle"></i>
                    Serial Number ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á - {deviceInfo.type}
                  </div>
                )}
                
                {serialNumberValid === false && (
                  <div className="validation-message invalid">
                    <i className="fas fa-times-circle"></i>
                    Serial Number ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
                  </div>
                )}
              </div>
            )}

            {/* QR Scanner */}
            {showQRScanner && (
              <div className="qr-scanner-container">
                <h3>üì∑ ‡∏™‡πÅ‡∏Å‡∏ô QR Code</h3>
                <QRCodeScanner 
                  onScanResult={handleQRCodeScan}
                  isActive={showQRScanner}
                />
                <div className="qr-scanner-help">
                  <p>üì± ‡∏ô‡∏≥‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏õ‡∏™‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà QR Code ‡∏ö‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏£‡∏£‡∏à‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå</p>
                  <button 
                    type="button" 
                    className="btn-cancel-qr"
                    onClick={handleQRScannerClose}
                  >
                    ‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô
                  </button>
                </div>
              </div>
            )}

            {deviceInfo && (
              <div className="device-preview">
                <h3>üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</h3>
                <div className="preview-content">
                  <div className="preview-item">
                    <strong>Serial Number:</strong> {serialNumber}
                  </div>
                  <div className="preview-item">
                    <strong>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:</strong> {deviceInfo.type}
                  </div>
                  <div className="preview-item">
                    <strong>‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô:</strong> {deviceInfo.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
                  </div>
                </div>
              </div>
            )}

            <div className="form-actions">
              <button 
                type="button" 
                className="btn-secondary"
                onClick={() => setCurrentPage('main')}
              >
                <i className="fas fa-arrow-left"></i>
                ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
              </button>
              
              <button 
                type="button" 
                className="btn-primary"
                onClick={nextStep}
                disabled={!serialNumberValid || validatingSerialNumber}
              >
                <i className="fas fa-arrow-right"></i>
                ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
              </button>
            </div>
          </div>
        )}

        {step === 2 && (
          <div className="step-content">
            <h2>üìù ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</h2>
            
            <div className="form-group">
              <label htmlFor="deviceName" className="form-label">
                <i className="fas fa-tag"></i>
                ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå *
              </label>
              <input
                id="deviceName"
                type="text"
                className="form-input"
                value={deviceName}
                onChange={(e) => setDeviceName(e.target.value)}
                placeholder="‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢"
              />
            </div>

            <div className="device-summary">
              <h3>üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</h3>
              <div className="summary-content">
                <div className="summary-item">
                  <strong>Serial Number:</strong> {serialNumber}
                </div>
                <div className="summary-item">
                  <strong>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå:</strong> {deviceInfo?.type}
                </div>
                <div className="summary-item">
                  <strong>‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå:</strong> {deviceName || '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠'}
                </div>
              </div>
            </div>

            <div className="form-actions">
              <button 
                type="button" 
                className="btn-secondary"
                onClick={prevStep}
                disabled={loading}
              >
                <i className="fas fa-arrow-left"></i>
                ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
              </button>
              
              <button 
                type="button" 
                className="btn-primary"
                onClick={registerDevice}
                disabled={loading || !deviceName.trim()}
              >
                {loading ? (
                  <>
                    <i className="fas fa-spinner fa-spin"></i>
                    ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô...
                  </>
                ) : (
                  <>
                    <i className="fas fa-check"></i>
                    ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
                  </>
                )}
              </button>
            </div>
          </div>
        )}

        {step === 3 && (
          <div className="step-content success">
            <div className="success-icon">üéâ</div>
            <h2>‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!</h2>
            <p>‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå "{deviceName}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß</p>
            <p>Serial Number: {serialNumber}</p>
            
            <div className="form-actions">
              <button 
                type="button" 
                className="btn-secondary"
                onClick={resetForm}
              >
                <i className="fas fa-plus"></i>
                ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏µ‡∏Å
              </button>
              
              <button 
                type="button" 
                className="btn-primary"
                onClick={() => setCurrentPage('main')}
              >
                <i className="fas fa-home"></i>
                ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Dashboard
              </button>
            </div>
          </div>
        )}
      </div>

      <div className="add-device-info">
        <h3>üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥</h3>
        <ul>
          <li>Serial Number ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô</li>
          <li>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Serial Number ‡∏ö‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏£‡∏£‡∏à‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå</li>
          <li>‡πÅ‡∏ï‡πà‡∏•‡∏∞ Serial Number ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß</li>
          <li>‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö</li>
        </ul>
      </div>
    </div>
  );
};

export default AddDevice;
