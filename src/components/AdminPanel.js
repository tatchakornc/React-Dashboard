import React, { useState, useEffect } from 'react';
import { ref, get, set, onValue } from 'firebase/database';
import { db } from '../firebase';
import './AdminPanel.css';

const AdminPanel = ({ currentUser, userRole, showToast }) => {
  const [isLoading, setIsLoading] = useState(true);
  const [mqttConfig, setMqttConfig] = useState({
    brokerUrl: 'ws://localhost:8083/mqtt',
    username: '',
    password: ''
  });
  const [systemStats, setSystemStats] = useState({
    totalUsers: 0,
    totalDevices: 0,
    activeDevices: 0
  });

  useEffect(() => {
    loadSystemData();
  }, []);

  const loadSystemData = async () => {
    try {
      // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö
      const [usersSnapshot, devicesSnapshot] = await Promise.all([
        get(ref(db, 'members')),
        get(ref(db, 'mqtt_devices'))
      ]);

      let totalUsers = 0;
      let totalDevices = 0;
      let activeDevices = 0;

      // ‡∏ô‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      if (usersSnapshot.exists()) {
        totalUsers = Object.keys(usersSnapshot.val()).length;
      }

      // ‡∏ô‡∏±‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
      if (devicesSnapshot.exists()) {
        const devices = devicesSnapshot.val();
        Object.values(devices).forEach(userDevices => {
          if (userDevices && typeof userDevices === 'object') {
            const deviceList = Object.values(userDevices);
            totalDevices += deviceList.length;
            activeDevices += deviceList.filter(device => device.status === 'online').length;
          }
        });
      }

      setSystemStats({
        totalUsers,
        totalDevices,
        activeDevices
      });

    } catch (error) {
      console.error('Error loading system data:', error);
      showToast('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö', 'error');
    } finally {
      setIsLoading(false);
    }
  };

  const saveMqttConfig = async () => {
    try {
      const configRef = ref(db, 'system/mqtt_config');
      await set(configRef, mqttConfig);
      showToast('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ MQTT ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'success');
    } catch (error) {
      console.error('Error saving MQTT config:', error);
      showToast('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤', 'error');
    }
  };

  if (userRole !== 'owner' && userRole !== 'admin') {
    return (
      <div className="admin-panel-error">
        <h2>‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á</h2>
        <p>‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÅ‡∏ú‡∏á‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÑ‡∏î‡πâ</p>
      </div>
    );
  }

  if (isLoading) {
    return (
      <div className="admin-panel-loading">
        <div className="loading-spinner"></div>
        <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö...</p>
      </div>
    );
  }

  return (
    <div className="admin-panel">
      <div className="admin-header">
        <h1>üîß Admin Panel - MQTT Dashboard</h1>
        <div className="admin-info">
          <span>‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•: {currentUser?.displayName || currentUser?.email}</span>
          <span className="role-badge">{userRole}</span>
        </div>
      </div>

      <div className="admin-content">
        {/* System Statistics */}
        <div className="stats-section">
          <h2>üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏∞‡∏ö‡∏ö</h2>
          <div className="stats-grid">
            <div className="stat-card">
              <div className="stat-icon">üë•</div>
              <div className="stat-info">
                <h3>{systemStats.totalUsers}</h3>
                <p>‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</p>
              </div>
            </div>
            
            <div className="stat-card">
              <div className="stat-icon">üì±</div>
              <div className="stat-info">
                <h3>{systemStats.totalDevices}</h3>
                <p>‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</p>
              </div>
            </div>
            
            <div className="stat-card">
              <div className="stat-icon">üü¢</div>
              <div className="stat-info">
                <h3>{systemStats.activeDevices}</h3>
                <p>‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå</p>
              </div>
            </div>
            
            <div className="stat-card">
              <div className="stat-icon">üìà</div>
              <div className="stat-info">
                <h3>{systemStats.totalDevices > 0 ? Math.round((systemStats.activeDevices / systemStats.totalDevices) * 100) : 0}%</h3>
                <p>‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå</p>
              </div>
            </div>
          </div>
        </div>

        {/* MQTT Configuration */}
        <div className="config-section">
          <h2>üîß ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ MQTT Broker</h2>
          <div className="config-form">
            <div className="form-group">
              <label>Broker URL:</label>
              <input
                type="text"
                value={mqttConfig.brokerUrl}
                onChange={(e) => setMqttConfig({...mqttConfig, brokerUrl: e.target.value})}
                placeholder="ws://localhost:8083/mqtt"
              />
            </div>
            
            <div className="form-group">
              <label>Username (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö):</label>
              <input
                type="text"
                value={mqttConfig.username}
                onChange={(e) => setMqttConfig({...mqttConfig, username: e.target.value})}
                placeholder="mqtt_user"
              />
            </div>
            
            <div className="form-group">
              <label>Password (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö):</label>
              <input
                type="password"
                value={mqttConfig.password}
                onChange={(e) => setMqttConfig({...mqttConfig, password: e.target.value})}
                placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
              />
            </div>
            
            <button onClick={saveMqttConfig} className="btn-save">
              üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
            </button>
          </div>
        </div>

        {/* System Management */}
        <div className="management-section">
          <h2>‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏ö</h2>
          <div className="management-actions">
            <button 
              onClick={loadSystemData}
              className="btn-refresh"
            >
              üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            </button>
            
            <button 
              onClick={() => showToast('‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ô‡∏µ‡πâ', 'info')}
              className="btn-export"
            >
              üìä ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
            </button>
            
            <button 
              onClick={() => showToast('‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ô‡∏µ‡πâ', 'info')}
              className="btn-backup"
            >
              üíæ ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            </button>
          </div>
        </div>

        {/* Information */}
        <div className="info-section">
          <h3>üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö</h3>
          <div className="info-content">
            <h4>üìã ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö:</h4>
            <ul>
              <li>‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ MQTT Broker ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</li>
              <li>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</li>
              <li>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á</li>
              <li>‡∏î‡∏π‡πÅ‡∏•‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</li>
            </ul>
            
            <h4>üîß ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ MQTT Broker:</h4>
            <ul>
              <li>URL ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: ws://localhost:8083/mqtt</li>
              <li>‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô URL ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£</li>
              <li>‡∏´‡∏≤‡∏Å‡∏°‡∏µ Username/Password ‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î</li>
              <li>‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Firebase ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AdminPanel;
